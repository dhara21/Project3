{"ast":null,"code":"import validator from 'validator';\n\nclass FormValidator {\n  constructor(validations) {\n    this.validations = validations;\n  }\n\n  validate(state) {\n    let validation = this.valid(); // for each validation rule\n\n    this.validations.forEach(rule => {\n      if (!validation[rule.field].isInvalid) {\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method;\n\n        if (validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = {\n            isInvalid: true,\n            message: rule.message\n          };\n          validation.isValid = false;\n        }\n      }\n    });\n    return validation;\n  }\n\n  valid() {\n    const validation = {};\n    this.validations.map(rule => validation[rule.field] = {\n      isInvalid: false,\n      message: ''\n    });\n    return {\n      isValid: true,\n      ...validation\n    };\n  }\n\n}\n\nexport default FormValidator;","map":{"version":3,"names":["validator","FormValidator","constructor","validations","validate","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validWhen","message","isValid","map"],"sources":["/Users/dhara/Documents/uOttawa Summer sem 9/SEG 3125/Project2_Final/project-two/src/pages/FormValidator.js"],"sourcesContent":["import validator from 'validator';\nclass FormValidator {\n    constructor(validations) {\n        this.validations = validations;\n    }\n    validate(state) {\n        let validation = this.valid();\n        // for each validation rule\n        this.validations.forEach(rule => {\n            if(!validation[rule.field].isInvalid) {\n                const field_value = state[rule.field].toString();\n                const args = rule.args || [];\n                const validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method\n                if(validation_method(field_value, ...args, state) !== rule.validWhen) {\n                    validation[rule.field] = {\n                        isInvalid: true,\n                        message: rule.message\n                    }\n                    validation.isValid = false;\n                }\n            }\n        });\n        return validation;\n    }\n    valid() {\n        const validation = {}\n        this.validations.map(rule => (validation[rule.field] = {\n            isInvalid: false,\n            message: ''\n        }));\n        return {\n            isValid: true,\n            ...validation\n        };\n    }\n}\nexport default FormValidator;"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;;AACA,MAAMC,aAAN,CAAoB;EAChBC,WAAW,CAACC,WAAD,EAAc;IACrB,KAAKA,WAAL,GAAmBA,WAAnB;EACH;;EACDC,QAAQ,CAACC,KAAD,EAAQ;IACZ,IAAIC,UAAU,GAAG,KAAKC,KAAL,EAAjB,CADY,CAEZ;;IACA,KAAKJ,WAAL,CAAiBK,OAAjB,CAAyBC,IAAI,IAAI;MAC7B,IAAG,CAACH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,CAAuBC,SAA3B,EAAsC;QAClC,MAAMC,WAAW,GAAGP,KAAK,CAACI,IAAI,CAACC,KAAN,CAAL,CAAkBG,QAAlB,EAApB;QACA,MAAMC,IAAI,GAAGL,IAAI,CAACK,IAAL,IAAa,EAA1B;QACA,MAAMC,iBAAiB,GAAG,OAAON,IAAI,CAACO,MAAZ,KAAuB,QAAvB,GAAkChB,SAAS,CAACS,IAAI,CAACO,MAAN,CAA3C,GAA2DP,IAAI,CAACO,MAA1F;;QACA,IAAGD,iBAAiB,CAACH,WAAD,EAAc,GAAGE,IAAjB,EAAuBT,KAAvB,CAAjB,KAAmDI,IAAI,CAACQ,SAA3D,EAAsE;UAClEX,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;YACrBC,SAAS,EAAE,IADU;YAErBO,OAAO,EAAET,IAAI,CAACS;UAFO,CAAzB;UAIAZ,UAAU,CAACa,OAAX,GAAqB,KAArB;QACH;MACJ;IACJ,CAbD;IAcA,OAAOb,UAAP;EACH;;EACDC,KAAK,GAAG;IACJ,MAAMD,UAAU,GAAG,EAAnB;IACA,KAAKH,WAAL,CAAiBiB,GAAjB,CAAqBX,IAAI,IAAKH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;MACnDC,SAAS,EAAE,KADwC;MAEnDO,OAAO,EAAE;IAF0C,CAAvD;IAIA,OAAO;MACHC,OAAO,EAAE,IADN;MAEH,GAAGb;IAFA,CAAP;EAIH;;AAjCe;;AAmCpB,eAAeL,aAAf"},"metadata":{},"sourceType":"module"}